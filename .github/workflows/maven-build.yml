name: Java Maven CI - TIP WLAN Opensync Protobuf

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.12
        uses: actions/setup-java@v1
        with:
          java-version: 1.12
          server-id: tip-wlan-cloud-maven-repo # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_REPO_USERNAME # env variable for username in deploy
          server-password: MAVEN_REPO_PASSWORD # env variable for password in deploy
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2
      - name: Cache Protobuf Binary
        uses: actions/cache@v1
        with:
          path: ~/protobuf-2.6.1-bin
          key: ${{ runner.os }}-protobuf
      - name: Check if protobuf compiler binary is present
        run: ls /home/runner/protobuf-2.6.1-bin/bin/protoc
      - name: Build protobuf binary if needed
        if: failure() # previous step failed - protoc file is not present
        run: |
          curl -L -O https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz
          tar xf protobuf-2.6.1.tar.gz
          cd protobuf-2.6.1
          LDFLAGS="-static-libgcc -static-libstdc++" ./configure --disable-shared --prefix=/home/runner/protobuf-2.6.1-bin
          cd src
          make protoc
          make install
      - name: Configure ~/.m2/toolchains.xml file
        run: |
          cp toolchains.xml ~/.m2/toolchains.xml
      - name: Build with Maven - test
        run:
          mvn -B --file pom.xml verify # Ensure all artifacts build successfully before we attempt deploy in order to prevent partial deploys.
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build with Maven - deploy
        run:
          mvn -B --file pom.xml -DskipTests deploy # Now that all builds have completed, we can deploy all the artifacts.
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
